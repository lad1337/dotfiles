# vim: ft=sh

export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="powerlevel9k/powerlevel9k"
ZSH_CUSTOM="$HOME/dotfiles/custom"
DISABLE_UPDATE_PROMPT=true

export DOT="$HOME/dotfiles"

plugins=(git zsh-syntax-highlighting kubectl vi-mode)

export LS_COLORS="di=34:ln=35:so=32:pi=33:ex=31:bd=36;01:cd=33;01:su=31;40;07:sg=36;40;07:tw=32;40;07:ow=33;40;07:"
# https://github.com/bhilburn/powerlevel9k
POWERLEVEL9K_SHORTEN_DIR_LENGTH=2
POWERLEVEL9K_SHORTEN_STRATEGY="truncate_to_unique"
POWERLEVEL9K_VCS_SHORTEN_LENGTH=16
POWERLEVEL9K_VCS_SHORTEN_MIN_LENGTH=11
POWERLEVEL9K_VCS_SHORTEN_STRATEGY="truncate_from_right"
POWERLEVEL9K_VCS_GIT_HOOKS=(vcs-detect-changes git-untracked git-aheadbehind git-remotebranch git-tagname)
# <space> forces the seprator to appear
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(ssh dir vcs)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator background_jobs virtualenv kubecontext)

# brew install zsh-completions
# and load
# might need: rm -f ~/.zcompdump; compinit
# info with: brew info zsh-completions
fpath=(/usr/local/share/zsh-completions $fpath)
# https://docs.brew.sh/Analytics
export HOMEBREW_NO_ANALYTICS=1

# zsh-manage
alias zr="source ~/.zshrc"
alias ze="vim ~/.zshrc"

# python virtual env stuff
export VIRTUAL_ENV_DISABLE_PROMPT=""
export VIRTUALENVWRAPPER_PYTHON="/usr/local/bin/python"
VIRTUALENVWRAPPER_PATH="/usr/local/bin/virtualenvwrapper.sh"
if [ -f "$VIRTUALENVWRAPPER_PATH" ]
then
  source "$VIRTUALENVWRAPPER_PATH"
fi
export VIRTUAL_ENV=''

# we speak english
#export LC_ALL=en_GB.UTF-8
export LANG=en_GB.UTF-8

# iterm2 tab color functions
source "$DOT/iterm-tab-color"
# custom colors
# http://www.w3schools.com/colors/colors_picker.asp
SSH_COLORS[production]=FF3838 #red
SSH_COLORS[staging]=FFFF38 # yellow
SSH_COLORS[integration]=0099FF # blue
SSH_COLORS[dev]=A0FFA0 # green
SSH_COLORS[test]=9B30FF # purple
SSH_COLORS[prod-new]=ff6600 # orange

# load all other 'extensions'
source "$DOT/colorman.zsh"
source "$DOT/git-flower.zsh"
# git-flower, config:
# url is without the key/id
# export HOTFIX_ISSUE_URL="https://github.com/lad1337/dotfiles/issues/"
export PATH="/usr/local/opt/python/libexec/bin:/usr/local/opt/coreutils/libexec/gnubin:/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:$HOME/bin:$DOT/bin:$HOME/.local/bin:$HOME/go/bin:$PATH"
commands[kubectl]="something"

# https://github.com/clvv/fasd#install
if /usr/bin/which -as fasd; then
    eval "$(fasd --init auto)"
fi

# http://cdn.smosh.com/sites/default/files/bloguploads/simpsons-fire.gif
kiwf(){
	find . -name $1 -delete -exec sh -c 'echo {} ðŸ”¥' \;
}

tunnel-anything(){
    if [[ $# < 2 || $# > 3 ]]
    then
        echo "Usage: tun <host> <hostport> [<port>]"
        return 1
    fi
    local host="$1"
    local hostport="$2"
    local port=${3:-$hostport}

    ssh -M -S "/tmp/tunnel-anything-$port" -fnNT -L ${port}:localhost:${hostport} "$host"
    vared -p "Tunnel is to '$host' open, on $port->$hostport (enter to stop)" -c tmp
    ssh -S "/tmp/tunnel-anything-$port" -O exit "$host"
}


ssl-fingerprint(){
    openssl s_client -servername "$1" -connect "$1:443" | openssl x509 -fingerprint -noout
}

# see http://stackoverflow.com/a/3572105
realpath(){
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}


1password(){
    if ! op list items --account=my > /dev/null; then
        eval $(op signin my)
    fi
}

calver(){
    local d=$(date +%y.%-m)
    local minor="${1:+.$1}"
    local rc="${2:+-rc$2}"
    echo "$d$minor$rc"
}

# LOAD all other functions
source $DOT/functions/*.sh
# LOAD THE ZSH
source $ZSH/oh-my-zsh.sh
compdef _ssh_hosts tunnel-anything

# load fuzzy finder
# currently installed by vim plugin manager
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_OPTS='--height 40% --reverse --inline-info'

export LOLMODE=false

alias repl="ipython"
alias last-stash="git stash show 'stash@{0}' -p"
local grc="/usr/local/bin/grc -es --colour=auto"
alias ping="${grc} ping"
alias dig="${grc} dig"
alias ifconfig="${grc} ifconfig"
alias traceroute="${grc} traceroute"
alias t="tree"
# http://superuser.com/questions/180299/how-can-i-trigger-the-screensaver-on-my-mac
alias ss="open /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app"
# clean tox
alias detox="find . -type f -name '*.py[co]' -delete -or -type d -name '__pycache__' -delete && rm -r .tox"
#open ports on osx
alias lsnet='lsof -nP -i4TCP -sTCP:LISTEN'
# Delete all volumes
alias docker-clean-volumes='printf "\n>>> Deleting dangling volumes\n\n" && docker volume rm $(docker volume ls -qf dangling=true)'
# Delete all stopped containers.
alias docker-clean-containers='printf "\n>>> Deleting stopped containers\n\n" && docker rm $(docker ps -a -q)'
# Delete all untagged images.
alias docker-clean-images='printf "\n>>> Deleting untagged images\n\n" && docker rmi $(docker images -q -f dangling=true)'
# clean all docker things
alias docker-clean-all='docker-clean-containers || true && docker-clean-images || true && docker-clean-volumes'
# git semantic version
alias are-we-there-yet="git tag -l -n1 | gsort -V"
# build a python wheel, you know because its long to type
alias bw="python setup.py bdist_wheel"
# http://osxdaily.com/2015/11/16/howto-flush-dns-cache-os-x-elcap/
alias flushdns='dscacheutil -flushcache;sudo killall -HUP mDNSResponder;say flushed'
# https://www.commandlinefu.com/commands/view/12218/convert-yaml-to-json
alias yaml2json="python -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)'"
# vim
alias vim='nvim -O'
alias e='vim'
alias watch='watch '

# enable pyenv
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

